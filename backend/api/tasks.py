from typing import Annotated, List

from fastapi import APIRouter, Depends, HTTPException, Query

from schemas.tasks import TaskCreateSchema, TaskSchema, TaskUpdateSchema, TaskIDs
from database.repository import TaskRepository

router = APIRouter(
    prefix='/tasks/v1/',
    tags=['To-do ‚úÖ']
)


@router.get('', summary='–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ üìÑ')
async def get_tasks():
    tasks = await TaskRepository.get_all()
    return {'data': tasks}

@router.post('/add', summary='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É ‚ûï')
async def add_task(
    task: TaskCreateSchema
):
    task_id = await TaskRepository.add_task(task)
    return {'succes': True, 'task_id': task_id}

@router.put('/{task_id}/edit', summary='–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É üìù')
async def edit_task(
    task_id: int, 
    updated_task: TaskUpdateSchema
    ):
    task = await TaskRepository.get_by_id(task_id)
    if task is None:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    task.name = updated_task.name
    task.description = updated_task.description

    updated_task = await TaskRepository.update_task(task) 
    return {'succes': True, 'task': updated_task}

@router.patch("/{task_id}/complete", response_model=TaskSchema)
async def complete_task(task_id: int):
    task = await TaskRepository.get_by_id(task_id)
    if task is None:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    task.completed = not task.completed
    updated_task = await TaskRepository.update_task(task)
    return updated_task

@router.delete('/{task_id}/delete', summary='–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É üóë')
async def delete_task(task_id: int):
    task = await TaskRepository.get_by_id(task_id)
    if task is None:
        raise HTTPException(status_code=404, detail="–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    await TaskRepository.delete_task(task_id)
    return {'succes': True} 

@router.delete('/delete-many', summary='–£–¥–∞–ª–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á üóë')
async def delete_tasks(task_ids: List[int] = Query(..., description="–°–ø–∏—Å–æ–∫ ID –∑–∞–¥–∞—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")):
    for task_id in task_ids:
        task = await TaskRepository.get_by_id(task_id)
        if task is None:
            raise HTTPException(status_code=404, detail=f"–ó–∞–¥–∞—á–∞ —Å ID {task_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞") 

    await TaskRepository.delete_tasks(task_ids) 
    return {'success': True, 'deleted_count': len(task_ids)}
